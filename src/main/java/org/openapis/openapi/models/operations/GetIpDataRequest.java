/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetIpDataRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ip_address")
    private JsonNullable<String> ipAddress;

    @JsonCreator
    public GetIpDataRequest(
            JsonNullable<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
    }
    
    public GetIpDataRequest() {
        this(JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> ipAddress() {
        return ipAddress;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetIpDataRequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = JsonNullable.of(ipAddress);
        return this;
    }

    public GetIpDataRequest withIpAddress(JsonNullable<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetIpDataRequest other = (GetIpDataRequest) o;
        return 
            Objects.deepEquals(this.ipAddress, other.ipAddress);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ipAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetIpDataRequest.class,
                "ipAddress", ipAddress);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> ipAddress = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = JsonNullable.of(ipAddress);
            return this;
        }

        public Builder ipAddress(JsonNullable<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }
        
        public GetIpDataRequest build() {
            return new GetIpDataRequest(
                ipAddress);
        }
    }
}
