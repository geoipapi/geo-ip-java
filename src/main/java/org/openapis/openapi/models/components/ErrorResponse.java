/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class ErrorResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<Boolean> success;

    @JsonProperty("ip")
    private String ip;

    @JsonProperty("error")
    private String error;

    @JsonCreator
    public ErrorResponse(
            @JsonProperty("success") Optional<Boolean> success,
            @JsonProperty("ip") String ip,
            @JsonProperty("error") String error) {
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(error, "error");
        this.success = success;
        this.ip = ip;
        this.error = error;
    }
    
    public ErrorResponse(
            String ip,
            String error) {
        this(Optional.empty(), ip, error);
    }

    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    @JsonIgnore
    public String ip() {
        return ip;
    }

    @JsonIgnore
    public String error() {
        return error;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ErrorResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    public ErrorResponse withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    public ErrorResponse withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    public ErrorResponse withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorResponse other = (ErrorResponse) o;
        return 
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.ip, other.ip) &&
            Objects.deepEquals(this.error, other.error);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            success,
            ip,
            error);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorResponse.class,
                "success", success,
                "ip", ip,
                "error", error);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> success;
 
        private String ip;
 
        private String error;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }
        
        public ErrorResponse build() {
            if (success == null) {
                success = _SINGLETON_VALUE_Success.value();
            }
            return new ErrorResponse(
                success,
                ip,
                error);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Success =
                new LazySingletonValue<>(
                        "success",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
