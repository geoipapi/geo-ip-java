/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class LocationInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private JsonNullable<Double> latitude;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private JsonNullable<Double> longitude;

    @JsonCreator
    public LocationInfo(
            @JsonProperty("latitude") JsonNullable<Double> latitude,
            @JsonProperty("longitude") JsonNullable<Double> longitude) {
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(longitude, "longitude");
        this.latitude = latitude;
        this.longitude = longitude;
    }
    
    public LocationInfo() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Double> latitude() {
        return latitude;
    }

    @JsonIgnore
    public JsonNullable<Double> longitude() {
        return longitude;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public LocationInfo withLatitude(double latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = JsonNullable.of(latitude);
        return this;
    }

    public LocationInfo withLatitude(JsonNullable<Double> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    public LocationInfo withLongitude(double longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = JsonNullable.of(longitude);
        return this;
    }

    public LocationInfo withLongitude(JsonNullable<Double> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LocationInfo other = (LocationInfo) o;
        return 
            Objects.deepEquals(this.latitude, other.latitude) &&
            Objects.deepEquals(this.longitude, other.longitude);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            latitude,
            longitude);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LocationInfo.class,
                "latitude", latitude,
                "longitude", longitude);
    }
    
    public final static class Builder {
 
        private JsonNullable<Double> latitude = JsonNullable.undefined();
 
        private JsonNullable<Double> longitude = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder latitude(double latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = JsonNullable.of(latitude);
            return this;
        }

        public Builder latitude(JsonNullable<Double> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        public Builder longitude(double longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = JsonNullable.of(longitude);
            return this;
        }

        public Builder longitude(JsonNullable<Double> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }
        
        public LocationInfo build() {
            return new LocationInfo(
                latitude,
                longitude);
        }
    }
}
