/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

public class GeoIPResponse {

    @JsonProperty("ip")
    private String ip;

    @JsonProperty("type")
    private String type;

    @JsonProperty("country")
    private CountryInfo country;

    @JsonProperty("location")
    private LocationInfo location;

    @JsonProperty("asn")
    private AsnInfo asn;

    @JsonCreator
    public GeoIPResponse(
            @JsonProperty("ip") String ip,
            @JsonProperty("type") String type,
            @JsonProperty("country") CountryInfo country,
            @JsonProperty("location") LocationInfo location,
            @JsonProperty("asn") AsnInfo asn) {
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(asn, "asn");
        this.ip = ip;
        this.type = type;
        this.country = country;
        this.location = location;
        this.asn = asn;
    }

    @JsonIgnore
    public String ip() {
        return ip;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    @JsonIgnore
    public CountryInfo country() {
        return country;
    }

    @JsonIgnore
    public LocationInfo location() {
        return location;
    }

    @JsonIgnore
    public AsnInfo asn() {
        return asn;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GeoIPResponse withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    public GeoIPResponse withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GeoIPResponse withCountry(CountryInfo country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public GeoIPResponse withLocation(LocationInfo location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public GeoIPResponse withAsn(AsnInfo asn) {
        Utils.checkNotNull(asn, "asn");
        this.asn = asn;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeoIPResponse other = (GeoIPResponse) o;
        return 
            Objects.deepEquals(this.ip, other.ip) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.asn, other.asn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ip,
            type,
            country,
            location,
            asn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeoIPResponse.class,
                "ip", ip,
                "type", type,
                "country", country,
                "location", location,
                "asn", asn);
    }
    
    public final static class Builder {
 
        private String ip;
 
        private String type;
 
        private CountryInfo country;
 
        private LocationInfo location;
 
        private AsnInfo asn;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder country(CountryInfo country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder location(LocationInfo location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder asn(AsnInfo asn) {
            Utils.checkNotNull(asn, "asn");
            this.asn = asn;
            return this;
        }
        
        public GeoIPResponse build() {
            return new GeoIPResponse(
                ip,
                type,
                country,
                location,
                asn);
        }
    }
}
