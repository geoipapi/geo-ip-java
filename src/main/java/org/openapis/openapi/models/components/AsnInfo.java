/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class AsnInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<Long> number;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    private JsonNullable<String> network;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    @JsonCreator
    public AsnInfo(
            @JsonProperty("number") JsonNullable<Long> number,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("network") JsonNullable<String> network,
            @JsonProperty("type") JsonNullable<String> type) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(network, "network");
        Utils.checkNotNull(type, "type");
        this.number = number;
        this.name = name;
        this.network = network;
        this.type = type;
    }
    
    public AsnInfo() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Long> number() {
        return number;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> network() {
        return network;
    }

    @JsonIgnore
    public JsonNullable<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AsnInfo withNumber(long number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    public AsnInfo withNumber(JsonNullable<Long> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    public AsnInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public AsnInfo withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AsnInfo withNetwork(String network) {
        Utils.checkNotNull(network, "network");
        this.network = JsonNullable.of(network);
        return this;
    }

    public AsnInfo withNetwork(JsonNullable<String> network) {
        Utils.checkNotNull(network, "network");
        this.network = network;
        return this;
    }

    public AsnInfo withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    public AsnInfo withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AsnInfo other = (AsnInfo) o;
        return 
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.network, other.network) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            number,
            name,
            network,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AsnInfo.class,
                "number", number,
                "name", name,
                "network", network,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<Long> number = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> network = JsonNullable.undefined();
 
        private JsonNullable<String> type = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder number(long number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        public Builder number(JsonNullable<Long> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder network(String network) {
            Utils.checkNotNull(network, "network");
            this.network = JsonNullable.of(network);
            return this;
        }

        public Builder network(JsonNullable<String> network) {
            Utils.checkNotNull(network, "network");
            this.network = network;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public AsnInfo build() {
            return new AsnInfo(
                number,
                name,
                network,
                type);
        }
    }
}
