/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class CountryInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_eu_member")
    private JsonNullable<Boolean> isEuMember;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    private JsonNullable<String> currencyCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continent")
    private JsonNullable<String> continent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private JsonNullable<String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<String> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private JsonNullable<String> zip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private JsonNullable<String> timezone;

    @JsonCreator
    public CountryInfo(
            @JsonProperty("is_eu_member") JsonNullable<Boolean> isEuMember,
            @JsonProperty("currency_code") JsonNullable<String> currencyCode,
            @JsonProperty("continent") JsonNullable<String> continent,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("country_code") JsonNullable<String> countryCode,
            @JsonProperty("state") JsonNullable<String> state,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("zip") JsonNullable<String> zip,
            @JsonProperty("timezone") JsonNullable<String> timezone) {
        Utils.checkNotNull(isEuMember, "isEuMember");
        Utils.checkNotNull(currencyCode, "currencyCode");
        Utils.checkNotNull(continent, "continent");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(timezone, "timezone");
        this.isEuMember = isEuMember;
        this.currencyCode = currencyCode;
        this.continent = continent;
        this.name = name;
        this.countryCode = countryCode;
        this.state = state;
        this.city = city;
        this.zip = zip;
        this.timezone = timezone;
    }
    
    public CountryInfo() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Boolean> isEuMember() {
        return isEuMember;
    }

    @JsonIgnore
    public JsonNullable<String> currencyCode() {
        return currencyCode;
    }

    @JsonIgnore
    public JsonNullable<String> continent() {
        return continent;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> countryCode() {
        return countryCode;
    }

    @JsonIgnore
    public JsonNullable<String> state() {
        return state;
    }

    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    @JsonIgnore
    public JsonNullable<String> zip() {
        return zip;
    }

    @JsonIgnore
    public JsonNullable<String> timezone() {
        return timezone;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CountryInfo withIsEuMember(boolean isEuMember) {
        Utils.checkNotNull(isEuMember, "isEuMember");
        this.isEuMember = JsonNullable.of(isEuMember);
        return this;
    }

    public CountryInfo withIsEuMember(JsonNullable<Boolean> isEuMember) {
        Utils.checkNotNull(isEuMember, "isEuMember");
        this.isEuMember = isEuMember;
        return this;
    }

    public CountryInfo withCurrencyCode(String currencyCode) {
        Utils.checkNotNull(currencyCode, "currencyCode");
        this.currencyCode = JsonNullable.of(currencyCode);
        return this;
    }

    public CountryInfo withCurrencyCode(JsonNullable<String> currencyCode) {
        Utils.checkNotNull(currencyCode, "currencyCode");
        this.currencyCode = currencyCode;
        return this;
    }

    public CountryInfo withContinent(String continent) {
        Utils.checkNotNull(continent, "continent");
        this.continent = JsonNullable.of(continent);
        return this;
    }

    public CountryInfo withContinent(JsonNullable<String> continent) {
        Utils.checkNotNull(continent, "continent");
        this.continent = continent;
        return this;
    }

    public CountryInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public CountryInfo withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CountryInfo withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = JsonNullable.of(countryCode);
        return this;
    }

    public CountryInfo withCountryCode(JsonNullable<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public CountryInfo withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    public CountryInfo withState(JsonNullable<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public CountryInfo withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    public CountryInfo withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public CountryInfo withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = JsonNullable.of(zip);
        return this;
    }

    public CountryInfo withZip(JsonNullable<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    public CountryInfo withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = JsonNullable.of(timezone);
        return this;
    }

    public CountryInfo withTimezone(JsonNullable<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CountryInfo other = (CountryInfo) o;
        return 
            Objects.deepEquals(this.isEuMember, other.isEuMember) &&
            Objects.deepEquals(this.currencyCode, other.currencyCode) &&
            Objects.deepEquals(this.continent, other.continent) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.timezone, other.timezone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isEuMember,
            currencyCode,
            continent,
            name,
            countryCode,
            state,
            city,
            zip,
            timezone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CountryInfo.class,
                "isEuMember", isEuMember,
                "currencyCode", currencyCode,
                "continent", continent,
                "name", name,
                "countryCode", countryCode,
                "state", state,
                "city", city,
                "zip", zip,
                "timezone", timezone);
    }
    
    public final static class Builder {
 
        private JsonNullable<Boolean> isEuMember = JsonNullable.undefined();
 
        private JsonNullable<String> currencyCode = JsonNullable.undefined();
 
        private JsonNullable<String> continent = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> countryCode = JsonNullable.undefined();
 
        private JsonNullable<String> state = JsonNullable.undefined();
 
        private JsonNullable<String> city = JsonNullable.undefined();
 
        private JsonNullable<String> zip = JsonNullable.undefined();
 
        private JsonNullable<String> timezone = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder isEuMember(boolean isEuMember) {
            Utils.checkNotNull(isEuMember, "isEuMember");
            this.isEuMember = JsonNullable.of(isEuMember);
            return this;
        }

        public Builder isEuMember(JsonNullable<Boolean> isEuMember) {
            Utils.checkNotNull(isEuMember, "isEuMember");
            this.isEuMember = isEuMember;
            return this;
        }

        public Builder currencyCode(String currencyCode) {
            Utils.checkNotNull(currencyCode, "currencyCode");
            this.currencyCode = JsonNullable.of(currencyCode);
            return this;
        }

        public Builder currencyCode(JsonNullable<String> currencyCode) {
            Utils.checkNotNull(currencyCode, "currencyCode");
            this.currencyCode = currencyCode;
            return this;
        }

        public Builder continent(String continent) {
            Utils.checkNotNull(continent, "continent");
            this.continent = JsonNullable.of(continent);
            return this;
        }

        public Builder continent(JsonNullable<String> continent) {
            Utils.checkNotNull(continent, "continent");
            this.continent = continent;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = JsonNullable.of(countryCode);
            return this;
        }

        public Builder countryCode(JsonNullable<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        public Builder state(JsonNullable<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = JsonNullable.of(zip);
            return this;
        }

        public Builder zip(JsonNullable<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = JsonNullable.of(timezone);
            return this;
        }

        public Builder timezone(JsonNullable<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }
        
        public CountryInfo build() {
            return new CountryInfo(
                isEuMember,
                currencyCode,
                continent,
                name,
                countryCode,
                state,
                city,
                zip,
                timezone);
        }
    }
}
